!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
71	NS_Solver.F90	/^ 71 FORMAT (A,I3,A,I3,A)$/;"	l	subroutine:make_grid	file:
71	NS_Solver.F90	/^ 71 FORMAT (A,I3,A,I3,A)$/;"	l	subroutine:read_grid	file:
71	NS_Solver.F90	/^ 71 FORMAT (I5,2X,F7.3,3(2X,E13.6))$/;"	l	subroutine:out_mon_data	file:
A_CG	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: A_CG,/;"	v	module:Poisson_cal_params
AdamBash	Modules.F90	/^	INTEGER, PARAMETER ::  RK3 		= 1, &$/;"	v	module:global
Ar_CG	Modules.F90	/^												 phi_CG, phiO_CG, Ar_CG$/;"	v	module:Poisson_cal_params
AreaBodyMarker	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: AreaBodyMarker$/;"	v	module:GCM
BCVal	Modules.F90	/^	REAL(KIND = 8) :: BCVal(/;"	v	module:global
BoundCond	Modules.F90	/^	INTEGER :: iProblem, Sol_Method, Mode, BoundCond(/;"	v	module:global
CDCL	GCM.F90	/^ SUBROUTINE CDCL$/;"	s
CDCLbase	Modules.F90	/^	INTEGER, PARAMETER :: monBase = 700, monBaseEx = 800, CDCLbase /;"	v	module:global
CONVECT	Modules.F90	/^						   PERIODIC = 4, &$/;"	v	module:global
ConGrad	Modules.F90	/^ 					    SOR     = 2, &$/;"	v	module:Poisson_cal_params
Cylinder	Modules.F90	/^						  DrivenCavity = 2, &$/;"	v	module:global
DrivenCavity	Modules.F90	/^	INTEGER, PARAMETER :: TaylorGreen  = 1, &$/;"	v	module:global
E	algridcar.f90	/^  real function E(/;"	f
ElemMarkerConnex	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: ElemMarkerConnex$/;"	v	module:GCM
FCOMP	makefile	/^FCOMP    = gfortran$/;"	m
Fc_u	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Fc_u,/;"	v	module:flo_vars
Fc_v	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Fc_u, Fc_v$/;"	v	module:flo_vars
Fp_u	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Fp_u,/;"	v	module:flo_vars
Fp_v	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Fp_u, Fp_v$/;"	v	module:flo_vars
Fv_u	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Fv_u,/;"	v	module:flo_vars
Fv_v	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Fv_u, Fv_v$/;"	v	module:flo_vars
GCM	Modules.F90	/^ MODULE GCM$/;"	m
GCp	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: GCp,/;"	v	module:GCM
GCu	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: GCp, GCu,/;"	v	module:GCM
GCv	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: GCp, GCu, GCv$/;"	v	module:GCM
GiFactor	Modules.F90	/^	REAL(KIND = 8), PARAMETER  :: GiFactor(/;"	v	module:cal_params
Gi_u	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Gi_u,/;"	v	module:flo_vars
Gi_v	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Gi_u, Gi_v$/;"	v	module:flo_vars
INLET	Modules.F90	/^	INTEGER, PARAMETER ::  WALL     = 1, &$/;"	v	module:global
JACOBI	Modules.F90	/^ INTEGER, PARAMETER ::  JACOBI /;"	v	module:Poisson_cal_params
LINKOPTS	makefile	/^LINKOPTS =  -o$/;"	m
LSFIP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: LSFMarker, LSFIP,/;"	v	module:GCM
LSFIPu	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: LSFMarker, LSFIP, LSFIPu,/;"	v	module:GCM
LSFIPv	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: LSFMarker, LSFIP, LSFIPu, LSFIPv$/;"	v	module:GCM
LSFMarker	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: LSFMarker,/;"	v	module:GCM
Mode	Modules.F90	/^	INTEGER :: iProblem, Sol_Method, Mode,/;"	v	module:global
NS_Solver	NS_Solver.F90	/^ PROGRAM NS_Solver$/;"	p
OBJS	makefile	/^OBJS =  Modules.o NS_Solver.o PoissonSolver.o GCM.o$/;"	m
OPTS	makefile	/^OPTS     =  -c  $/;"	m
OUTLET	Modules.F90	/^						   INLET	= 2, &$/;"	v	module:global
PERIODIC	Modules.F90	/^						   OUTLET	= 3, &$/;"	v	module:global
Phi_ex	Modules.F90	/^													Vout, Pout, Vor, &$/;"	v	module:flo_vars
Poisson_Solver	PoissonSolver.F90	/^ SUBROUTINE Poisson_Solver$/;"	s
Poisson_cal_params	Modules.F90	/^  MODULE Poisson_cal_params$/;"	m
Pout	Modules.F90	/^													Vout, Pout,/;"	v	module:flo_vars
RK3	Modules.F90	/^	INTEGER, PARAMETER ::  RK3 /;"	v	module:global
Re_num	Modules.F90	/^	REAL(KIND = 8) :: Re_num$/;"	v	module:global
SOR	Modules.F90	/^ INTEGER, PARAMETER ::  JACOBI  = 1, &$/;"	v	module:Poisson_cal_params
SYMM	Modules.F90	/^						   CONVECT  = 5, &$/;"	v	module:global
Sol_Method	Modules.F90	/^	INTEGER :: iProblem, Sol_Method,/;"	v	module:global
TaylorGreen	Modules.F90	/^	INTEGER, PARAMETER :: TaylorGreen /;"	v	module:global
Tmax	Modules.F90	/^	REAL (KIND = 8) :: Tmin, Tmax,/;"	v	module:grid_params
Tmin	Modules.F90	/^	REAL (KIND = 8) :: Tmin,/;"	v	module:grid_params
U	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: U,/;"	v	module:Poisson_cal_params
Uex	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: U, Uold, Uex,/;"	v	module:Poisson_cal_params
Uold	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: U, Uold,/;"	v	module:Poisson_cal_params
Uout	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Xout, Yout, Uout,/;"	v	module:flo_vars
Var_ex	Modules.F90	/^	INTEGER :: Var_ex$/;"	v	module:flo_vars
Vor	Modules.F90	/^													Vout, Pout, Vor,/;"	v	module:flo_vars
Vout	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Xout, Yout, Uout, &$/;"	v	module:flo_vars
WALL	Modules.F90	/^	INTEGER, PARAMETER ::  WALL /;"	v	module:global
Xmax	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax,/;"	v	module:grid_params
XmaxG	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax, Ymin, Ymax, XminG, XmaxG,/;"	v	module:grid_params
Xmin	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin,/;"	v	module:grid_params
XminG	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax, Ymin, Ymax, XminG,/;"	v	module:grid_params
Xout	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Xout,/;"	v	module:flo_vars
Ymax	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax, Ymin, Ymax,/;"	v	module:grid_params
YmaxG	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax, Ymin, Ymax, XminG, XmaxG, YminG, YmaxG$/;"	v	module:grid_params
Ymin	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax, Ymin,/;"	v	module:grid_params
YminG	Modules.F90	/^ 	REAL (KIND = 8) :: Xmin, Xmax, Ymin, Ymax, XminG, XmaxG, YminG,/;"	v	module:grid_params
Yout	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: Xout, Yout,/;"	v	module:flo_vars
aE	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: aP, aE,/;"	v	module:Poisson_cal_params
aN	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: aP, aE, aW, aN,/;"	v	module:Poisson_cal_params
aP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: aP,/;"	v	module:Poisson_cal_params
aS	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: aP, aE, aW, aN, aS$/;"	v	module:Poisson_cal_params
aW	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: aP, aE, aW,/;"	v	module:Poisson_cal_params
algridcar	algridcar.f90	/^program algridcar$/;"	p
ali	algridcar.f90	/^  subroutine ali(/;"	s
allocate_Poisson_memory	PoissonSolver.F90	/^ SUBROUTINE allocate_Poisson_memory$/;"	s
allocate_flo_vars	NS_Solver.F90	/^ SUBROUTINE allocate_flo_vars$/;"	s
alpha	Modules.F90	/^ REAL(KIND = 8) :: alpha$/;"	v	module:Poisson_cal_params
b_CG	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: A_CG, b_CG,/;"	v	module:Poisson_cal_params
cal_params	Modules.F90	/^ MODULE cal_params$/;"	m
calc_coeffs_nb	GCM.F90	/^ SUBROUTINE calc_coeffs_nb /;"	s
calc_inner_prod	PoissonSolver.F90	/^ REAL(KIND = 8) FUNCTION calc_inner_prod /;"	f
cdir	algridcar.f90	/^ integer ncoord, sti, edi, cdir,/;"	v	program:algridcar
close_mon_files	NS_Solver.F90	/^ SUBROUTINE close_mon_files$/;"	s
coeffsnb	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: coeffsnb$/;"	v	module:GCM
compute_LSF_marker	GCM.F90	/^ SUBROUTINE compute_LSF_marker$/;"	s
compute_alpha	PoissonSolver.F90	/^ SUBROUTINE compute_alpha$/;"	s
compute_flux	NS_Solver.F90	/^ SUBROUTINE compute_flux(/;"	s
compute_global_error	PoissonSolver.F90	/^ SUBROUTINE compute_global_error$/;"	s
compute_out_vars	NS_Solver.F90	/^ SUBROUTINE compute_out_vars$/;"	s
compute_residual	PoissonSolver.F90	/^ SUBROUTINE compute_residual$/;"	s
cont	algridcar.f90	/^ integer ncoord, sti, edi, cdir, opt, cont$/;"	v	program:algridcar
converged	Modules.F90	/^ LOGICAL :: converged$/;"	v	module:Poisson_cal_params
create_GCM	GCM.F90	/^ SUBROUTINE create_GCM$/;"	s
disp_simulation_message	NS_Solver.F90	/^ SUBROUTINE disp_simulation_message$/;"	s
dsmin	algridcar.f90	/^ real stx, edx, dx, dsmin$/;"	v	program:algridcar
dt	Modules.F90	/^	REAL (KIND = 8) :: Tmin, Tmax, time, dt,/;"	v	module:grid_params
dt2	Modules.F90	/^	REAL (KIND = 8) :: Tmin, Tmax, time, dt, dt2$/;"	v	module:grid_params
dtFactor	Modules.F90	/^	REAL(KIND = 8), PARAMETER  :: dtFactor(/;"	v	module:cal_params
dtFactorCor	Modules.F90	/^	REAL(KIND = 8), PARAMETER  :: dtFactorCor(/;"	v	module:cal_params
dx	Modules.F90	/^	REAL (KIND = 8) :: dx,/;"	v	module:grid_params
dx	algridcar.f90	/^ real stx, edx,/;"	v	program:algridcar
dxue	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxue,/;"	v	module:grid_params
dxuw	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxue, dxuw,/;"	v	module:grid_params
dxve	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxve,/;"	v	module:grid_params
dxvw	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxve, dxvw,/;"	v	module:grid_params
dy	Modules.F90	/^	REAL (KIND = 8) :: dx, dy$/;"	v	module:grid_params
dyun	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxue, dxuw, dyun,/;"	v	module:grid_params
dyus	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxue, dxuw, dyun, dyus$/;"	v	module:grid_params
dyvn	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxve, dxvw, dyvn,/;"	v	module:grid_params
dyvs	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: dxve, dxvw, dyvn, dyvs$/;"	v	module:grid_params
edi	algridcar.f90	/^ integer ncoord, sti, edi,/;"	v	program:algridcar
edx	algridcar.f90	/^ real stx, edx,/;"	v	program:algridcar
elem	Modules.F90	/^	INTEGER :: nodes, elem,/;"	v	module:grid_params
f	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: U, Uold, Uex, f$/;"	v	module:Poisson_cal_params
flo_vars	Modules.F90	/^ MODULE flo_vars$/;"	m
fmasterlog	Modules.F90	/^	INTEGER, PARAMETER :: fmasterlog /;"	v	module:global
free_GCM_vars	GCM.F90	/^ SUBROUTINE free_GCM_vars$/;"	s
free_Poisson_memory	PoissonSolver.F90	/^ SUBROUTINE free_Poisson_memory$/;"	s
free_flo_vars	NS_Solver.F90	/^ SUBROUTINE free_flo_vars$/;"	s
free_grid_params	NS_Solver.F90	/^ SUBROUTINE free_grid_params$/;"	s
freq	Modules.F90	/^	REAL(KIND = 8) :: freq,/;"	v	module:global
gen_opt	Modules.F90	/^	INTEGER :: gen_opt$/;"	v	module:grid_params
get_coeffs	PoissonSolver.F90	/^ SUBROUTINE get_coeffs$/;"	s
global	Modules.F90	/^ MODULE global$/;"	m
gmap	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: gmap,/;"	v	module:GCM
gmapOut	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: gmap, gmapU, gmapV, gmapOut /;"	v	module:GCM
gmapU	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: gmap, gmapU,/;"	v	module:GCM
gmapV	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: gmap, gmapU, gmapV,/;"	v	module:GCM
grid_params	Modules.F90	/^ MODULE grid_params$/;"	m
iBlank	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: iBlank,/;"	v	module:GCM
iBlankOut	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: iBlank, iBlanku, iBlankv, iBlankOut$/;"	v	module:GCM
iBlanku	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: iBlank, iBlanku,/;"	v	module:GCM
iBlankv	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: iBlank, iBlanku, iBlankv,/;"	v	module:GCM
iCDCL	Modules.F90	/^	INTEGER :: iCDCL,/;"	v	module:global
iIntlBody	Modules.F90	/^ INTEGER :: iIntlBody$/;"	v	module:GCM
iProblem	Modules.F90	/^	INTEGER :: iProblem,/;"	v	module:global
iRestart	Modules.F90	/^	INTEGER :: iRestart,/;"	v	module:global
iVerbose	Modules.F90	/^	INTEGER :: iCDCL, iVerbose$/;"	v	module:global
imon	Modules.F90	/^	INTEGER, ALLOCATABLE, DIMENSION(:) :: imon,/;"	v	module:global
impose_BC	PoissonSolver.F90	/^ SUBROUTINE impose_BC$/;"	s
impose_IBM_bc	GCM.F90	/^ SUBROUTINE impose_IBM_bc$/;"	s
init_flo_vars	NS_Solver.F90	/^ SUBROUTINE init_flo_vars$/;"	s
init_mon_files	NS_Solver.F90	/^ SUBROUTINE init_mon_files$/;"	s
initialize_Poisson	PoissonSolver.F90	/^ SUBROUTINE initialize_Poisson$/;"	s
iter	Modules.F90	/^	INTEGER :: iter,/;"	v	module:global
iterG	Modules.F90	/^	INTEGER :: iter, iterG,/;"	v	module:global
iterate	NS_Solver.F90	/^ SUBROUTINE iterate$/;"	s
iterate_Poisson	PoissonSolver.F90	/^ SUBROUTINE iterate_Poisson$/;"	s
itermax	Modules.F90	/^	INTEGER :: iter, iterG, itermax,/;"	v	module:global
itoggle	Modules.F90	/^	INTEGER :: iRestart, nRead, itoggle$/;"	v	module:global
jmon	Modules.F90	/^	INTEGER, ALLOCATABLE, DIMENSION(:) :: imon, jmon$/;"	v	module:global
make_grid	NS_Solver.F90	/^ SUBROUTINE make_grid$/;"	s
mat_prod	PoissonSolver.F90	/^ SUBROUTINE mat_prod(/;"	s
minute	Modules.F90	/^	INTEGER :: minute$/;"	v	module:cal_params
monBase	Modules.F90	/^	INTEGER, PARAMETER :: monBase /;"	v	module:global
monBaseEx	Modules.F90	/^	INTEGER, PARAMETER :: monBase = 700, monBaseEx /;"	v	module:global
mx	algridcar.f90	/^ integer mx,/;"	v	program:algridcar
my	algridcar.f90	/^ integer mx, my,/;"	v	program:algridcar
mz	algridcar.f90	/^ integer mx, my, mz$/;"	v	program:algridcar
nBodyMarker	Modules.F90	/^ INTEGER :: nBodyMarker,/;"	v	module:GCM
nElemMarker	Modules.F90	/^ INTEGER :: nBodyMarker, nElemMarker$/;"	v	module:GCM
nGC	Modules.F90	/^ INTEGER :: nGC,/;"	v	module:GCM
nGCu	Modules.F90	/^ INTEGER :: nGC, nGCu,/;"	v	module:GCM
nGCv	Modules.F90	/^ INTEGER :: nGC, nGCu, nGCv$/;"	v	module:GCM
nRead	Modules.F90	/^	INTEGER :: iRestart, nRead,/;"	v	module:global
nb4v1	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: nb4v1,/;"	v	module:GCM
nb4v1u	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: nb4v1, nb4v1u,/;"	v	module:GCM
nb4v1v	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: nb4v1, nb4v1u, nb4v1v$/;"	v	module:GCM
nbMarker	Modules.F90	/^ INTEGER, ALLOCATABLE, DIMENSION (:,:) :: nbMarker$/;"	v	module:GCM
ncc	Modules.F90	/^	INTEGER :: nodes, elem, ncc,/;"	v	module:grid_params
nci	Modules.F90	/^	INTEGER :: ngx, ngy, ngi, ngj, ncx, ncy, nci,/;"	v	module:grid_params
ncj	Modules.F90	/^	INTEGER :: ngx, ngy, ngi, ngj, ncx, ncy, nci, ncj$/;"	v	module:grid_params
ncoord	algridcar.f90	/^ integer ncoord,/;"	v	program:algridcar
ncx	Modules.F90	/^	INTEGER :: ngx, ngy, ngi, ngj, ncx,/;"	v	module:grid_params
ncy	Modules.F90	/^	INTEGER :: ngx, ngy, ngi, ngj, ncx, ncy,/;"	v	module:grid_params
ndim	algridcar.f90	/^ integer ndim$/;"	v	program:algridcar
ngi	Modules.F90	/^	INTEGER :: ngx, ngy, ngi,/;"	v	module:grid_params
ngj	Modules.F90	/^	INTEGER :: ngx, ngy, ngi, ngj,/;"	v	module:grid_params
ngx	Modules.F90	/^	INTEGER :: ngx,/;"	v	module:grid_params
ngy	Modules.F90	/^	INTEGER :: ngx, ngy,/;"	v	module:grid_params
nintcc	Modules.F90	/^	INTEGER :: nodes, elem, ncc, nintcc$/;"	v	module:grid_params
nmon	Modules.F90	/^	INTEGER :: nmon$/;"	v	module:global
nodes	Modules.F90	/^	INTEGER :: nodes,/;"	v	module:grid_params
normElX	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: normElX,/;"	v	module:GCM
normElY	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: normElX, normElY$/;"	v	module:GCM
ntec	Modules.F90	/^	INTEGER :: iter, iterG, itermax, ntec$/;"	v	module:global
nu	Modules.F90	/^	REAL(KIND = 8), PARAMETER :: nu /;"	v	module:global
nvarsGC	Modules.F90	/^ INTEGER, PARAMETER :: nvarsGC /;"	v	module:GCM
omega	Modules.F90	/^	REAL(KIND = 8) :: freq, omega$/;"	v	module:global
opt	algridcar.f90	/^ integer ncoord, sti, edi, cdir, opt,/;"	v	program:algridcar
out_data	NS_Solver.F90	/^ SUBROUTINE out_data$/;"	s
out_marker_data	NS_Solver.F90	/^ SUBROUTINE out_marker_data$/;"	s
out_mon_data	NS_Solver.F90	/^ SUBROUTINE out_mon_data$/;"	s
out_restart_data	NS_Solver.F90	/^ SUBROUTINE out_restart_data$/;"	s
pBodyMarker	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBodyMarker, yBodyMarker, pBodyMarker$/;"	v	module:GCM
phiO_CG	Modules.F90	/^												 phi_CG, phiO_CG,/;"	v	module:Poisson_cal_params
phi_CG	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: A_CG, b_CG, resid_CG, &$/;"	v	module:Poisson_cal_params
pi	Modules.F90	/^	REAL(KIND = 8), PARAMETER :: pi /;"	v	module:global
pr	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: velx, vely, pr$/;"	v	module:flo_vars
prBI	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBI, yBI, prBI,/;"	v	module:GCM
prIP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBI, yBI, prBI, xIP, yIP, prIP$/;"	v	module:GCM
px	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm, px,/;"	v	module:grid_params
py	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm, px, py,/;"	v	module:grid_params
read_grid	NS_Solver.F90	/^ SUBROUTINE read_grid$/;"	s
read_input	NS_Solver.F90	/^ SUBROUTINE read_input$/;"	s
read_restart_data	NS_Solver.F90	/^ SUBROUTINE read_restart_data$/;"	s
resid0	Modules.F90	/^ REAL(KIND = 8) :: residG, residMon, resid0$/;"	v	module:Poisson_cal_params
residG	Modules.F90	/^ REAL(KIND = 8) :: residG,/;"	v	module:Poisson_cal_params
residMon	Modules.F90	/^ REAL(KIND = 8) :: residG, residMon,/;"	v	module:Poisson_cal_params
resid_CG	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: A_CG, b_CG, resid_CG,/;"	v	module:Poisson_cal_params
rho	Modules.F90	/^	REAL(KIND = 8), PARAMETER :: nu = 1., rho /;"	v	module:global
root	algridcar.f90	/^  real function root(/;"	f
sec	Modules.F90	/^	REAL(KIND = 8) :: tstart, tend, sec$/;"	v	module:cal_params
set_velBC	NS_Solver.F90	/^ SUBROUTINE set_velBC$/;"	s
sti	algridcar.f90	/^ integer ncoord, sti,/;"	v	program:algridcar
stx	algridcar.f90	/^ real stx,/;"	v	program:algridcar
tend	Modules.F90	/^	REAL(KIND = 8) :: tstart, tend,/;"	v	module:cal_params
time	Modules.F90	/^	REAL (KIND = 8) :: Tmin, Tmax, time,/;"	v	module:grid_params
time_scheme	Modules.F90	/^	INTEGER :: time_scheme$/;"	v	module:global
tstart	Modules.F90	/^	REAL(KIND = 8) :: tstart,/;"	v	module:cal_params
uIP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIu, yBIu, xIPu, yIPu, uIP$/;"	v	module:GCM
uinf	Modules.F90	/^	REAL(KIND = 8) :: uinf,/;"	v	module:flo_vars
ux	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm, px, py, ux,/;"	v	module:grid_params
uy	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm, px, py, ux, uy,/;"	v	module:grid_params
vIP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIv, yBIv, xIPv, yIPv, vIP$/;"	v	module:GCM
velx	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: velx,/;"	v	module:flo_vars
velxH	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: velxH,/;"	v	module:flo_vars
vely	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: velx, vely,/;"	v	module:flo_vars
velyH	Modules.F90	/^	REAL(KIND = 8), ALLOCATABLE, DIMENSION (:,:) :: velxH, velyH$/;"	v	module:flo_vars
vinf	Modules.F90	/^	REAL(KIND = 8) :: uinf, vinf$/;"	v	module:flo_vars
vx	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm, px, py, ux, uy, vx,/;"	v	module:grid_params
vy	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm, px, py, ux, uy, vx, vy$/;"	v	module:grid_params
x	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: x,/;"	v	module:grid_params
x	algridcar.f90	/^ real, dimension(:), allocatable :: x,/;"	v	program:algridcar
xBI	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBI,/;"	v	module:GCM
xBIu	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIu,/;"	v	module:GCM
xBIv	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIv,/;"	v	module:GCM
xBodyMarker	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBodyMarker,/;"	v	module:GCM
xElemCent	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xElemCent,/;"	v	module:GCM
xIP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBI, yBI, prBI, xIP,/;"	v	module:GCM
xIPu	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIu, yBIu, xIPu,/;"	v	module:GCM
xIPv	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIv, yBIv, xIPv,/;"	v	module:GCM
xc	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: x, y, xc,/;"	v	module:grid_params
xgm	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm,/;"	v	module:grid_params
xmon	Modules.F90	/^	REAL, ALLOCATABLE, DIMENSION(:) :: xmon,/;"	v	module:global
y	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: x, y,/;"	v	module:grid_params
y	algridcar.f90	/^ real, dimension(:), allocatable :: x, y,/;"	v	program:algridcar
yBI	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBI, yBI,/;"	v	module:GCM
yBIu	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIu, yBIu,/;"	v	module:GCM
yBIv	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIv, yBIv,/;"	v	module:GCM
yBodyMarker	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBodyMarker, yBodyMarker,/;"	v	module:GCM
yElemCent	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xElemCent, yElemCent$/;"	v	module:GCM
yIP	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBI, yBI, prBI, xIP, yIP,/;"	v	module:GCM
yIPu	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIu, yBIu, xIPu, yIPu,/;"	v	module:GCM
yIPv	Modules.F90	/^ REAL(KIND = 8), ALLOCATABLE, DIMENSION (:) :: xBIv, yBIv, xIPv, yIPv,/;"	v	module:GCM
yc	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: x, y, xc, yc$/;"	v	module:grid_params
ygm	Modules.F90	/^	REAL (KIND = 8), ALLOCATABLE, DIMENSION(:,:) :: xgm, ygm,/;"	v	module:grid_params
ymon	Modules.F90	/^	REAL, ALLOCATABLE, DIMENSION(:) :: xmon, ymon,/;"	v	module:global
z	algridcar.f90	/^ real, dimension(:), allocatable :: x, y, z$/;"	v	program:algridcar
zmon	Modules.F90	/^	REAL, ALLOCATABLE, DIMENSION(:) :: xmon, ymon, zmon$/;"	v	module:global
